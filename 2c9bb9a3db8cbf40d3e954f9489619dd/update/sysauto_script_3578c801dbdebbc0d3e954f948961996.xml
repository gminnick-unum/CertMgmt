<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time/>
        <max_drift/>
        <name>Match Completed Service Requests to Certs</name>
        <offset/>
        <offset_type>0</offset_type>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 04:00:00</run_period>
        <run_start>2019-06-25 14:19:30</run_start>
        <run_time>1970-01-01 05:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[//Script attempts to match Closed requests to existing certificates
var errorOccured = false;

try{
	var queryString = 'state=3^u_certificate_request_typeINexternal_new,internal_new^u_certificateISEMPTY';
	var completedRequests = new GlideRecord('x_unugr_certificat_certificate_request');
	completedRequests.addEncodedQuery(queryString);
	completedRequests.query();

	gs.info('Completed Requests ' + completedRequests.getRowCount());

	while(completedRequests.next()){
		//see if we can make a match using common name using the certificate name entered in the request
		//function may bring back more than one match.  In that case we need to add those matches to the recon table
		//if we have only one match then proceed with transfering the request data to the cert
		foundMatches = getByCommonName(completedRequests.u_certificate_name);
		//if no matches found on common name try matching to subject name
		if(foundMatches.length == 0){
			foundMatches = getBySubjectName(completedRequests.u_certificate_name);
		}
		if(foundMatches.length == 1){
			certificateMatch = foundMatches[0];
			transferRequestDataToCertificate(certificateMatch,completedRequests);
			completedRequests.u_certificate = certificateMatch;
			completedRequests.update();
		} else if(foundMatches.length > 1){
			//more than one match found, add findings to reconciliation for manual follow-up
			addFindingToRecon(foundMatches,completedRequests);
		} 

	} 
} catch(e){
	errorOccured = true;
	var errorMessage = 'Error occured in Match Completed Service Requests to Certs: ' + e;
	gs.info(errorMessage);
} finally{
	if(errorOccured) {
		gs.info('Match Completed Service Requests to Certs finished with Errors');
	} else{
		gs.info('Match Completed Service Requests to Certs without Errors');
	}
}

function addFindingToRecon(foundMatches,completedRequests){
	
	for(i=0;i < foundMatches.length;i++){
		var reconRecord = new GlideRecord('x_unugr_certificat_request_recon');
		reconRecord.addQuery('u_certificate_request',completedRequests.sys_id);
		reconRecord.addQuery('u_certificate_match',foundMatches[i]);
		reconRecord.query();

		if(reconRecord.next()){
			reconRecord.u_last_found = new GlideDateTime();
			reconRecord.update();
		} else{
			var dateFound = new GlideDateTime();
			reconRecord.initialize();
			reconRecord.u_first_found = dateFound;
			reconRecord.u_last_found = dateFound;
			reconRecord.u_certificate_request = completedRequests.sys_id;
			reconRecord.u_certificate_match = foundMatches[i];
			reconRecord.insert();
		}		
	}

}
function transferRequestDataToCertificate(certificateMatch,completedRequests){
	//function is called if only one match was found.  
	//Set the certificate owner as the onbehalf of
	var certificateRecord = new GlideRecord('x_unugr_certificat_digital_certificate');
	certificateRecord.addQuery('sys_id',certificateMatch);
	certificateRecord.query();
	
	if(certificateRecord.next()){
		certificateRecord.u_owned_by = completedRequests.u_requested_for;
		//If Sans is empty and the request has Sans informtion
		//then populate with that value
		if((certificateRecord.u_sans.toString()).length == 0 && (completedRequests.u_dns_names.toString()).length != 0){
			certificateRecord.u_sans = completedRequests.u_dns_names;
		}
		//add any associated servers
		if(completedRequests.u_associated_servers.length != 0){
			var serverArray = completedRequests.u_associated_servers.split(','); 
			addServerAssociations(serverArray,certificateRecord.sys_id);
		}
		//add any associated applications
		if(completedRequests.associated_applications.length != 0){
			var applicationArray = completedRequests.associated_applications.split(',');
			addApplicationAssociations(applicationArray,certificateRecord.sys_id);
		}
		//find the maintenance group by looking for the installation task. Use task the assignment group
		var maintAssignmentGroup = getMaintenanceGroup(completedRequests.sys_id);
		certificateRecord.maintenance_group = maintAssignmentGroup;
		certificateRecord.update();
	}
	
}
function getMaintenanceGroup(requestSysId){
	var maintGroup;
	var queryString = 'certificate_request.sys_id=|REQUESTSYSID|^u_task_activity=installation';
	queryString = queryString.replace('|REQUESTSYSID|', requestSysId);
	
	var installationTaskRecord = new GlideRecord('x_unugr_certificat_certificate_task');
	installationTaskRecord.addEncodedQuery(queryString);
	installationTaskRecord.query();
	
	if(installationTaskRecord.next()){
		maintGroup = installationTaskRecord.assignment_group.sys_id;
	}
	
	return maintGroup;
}
function addApplicationAssociations(associatedApplications,certificateSysId){
		//Loop through the associatedApplications Array
		for(i=0;i<associatedApplications.length;i++){
			var applicationAssociation = new GlideRecord('x_unugr_certificat_m2m_unum_applica_digital_cert');
			//First check to see if association is already made.	0
			applicationAssociation.addQuery('unum_application',associatedApplications[i]);
			applicationAssociation.addQuery('digital_certificate',certificateSysId);
			applicationAssociation.query();
			//if not found then add the association
			if(applicationAssociation.getRowCount() == 0){
				applicationAssociation.initialize();
				applicationAssociation.unum_application = associatedApplications[i];
				applicationAssociation.digital_certificate = certificateSysId;
				applicationAssociation.u_first_found = new GlideDateTime();
				applicationAssociation.u_last_found = new GlideDateTime();
				applicationAssociation.insert();
			}
		}
			
}

function addServerAssociations(associatedServers,certificateSysId){
		//Loop through the associatedServers Array
		for(i=0;i<associatedServers.length;i++){
			var serverAssociation = new GlideRecord('x_unugr_certificat_m2m_servers_digital_cert');
			//First check to see if association is already made.	0
			serverAssociation.addQuery('server',associatedServers[i]);
			serverAssociation.addQuery('digital_certificate',certificateSysId);
			serverAssociation.query();
			//if not found then add the association
			if(serverAssociation.getRowCount() == 0){
				serverAssociation.initialize();
				serverAssociation.server = associatedServers[i];
				serverAssociation.digital_certificate = certificateSysId;
				serverAssociation.u_first_found = new GlideDateTime();
				serverAssociation.u_last_found = new GlideDateTime();
				serverAssociation.insert();
			}
		}
		

		
	
}
function getByCommonName(certificateName){
	var queryString = 'u_common_name=|COMMONNAME|^u_active=true';
	var matchesArray = [];
	queryString = queryString.replace('|COMMONNAME|', certificateName);
	var findByCommonName = new GlideRecord('x_unugr_certificat_digital_certificate');
	findByCommonName.addEncodedQuery(queryString);
	findByCommonName.query();
	while(findByCommonName.next()){
		matchesArray.push(findByCommonName.sys_id.toString());
	}
	
	return matchesArray;
}
function getBySubjectName(certificateName){
	var queryString = 'u_subject=|COMMONNAME|^u_active=true';
	var matchesArray = [];
	queryString = queryString.replace('|COMMONNAME|', certificateName);
	var findBySubjectName = new GlideRecord('x_unugr_certificat_digital_certificate');
	findBySubjectName.addEncodedQuery(queryString);
	findBySubjectName.query();
	
	while(findBySubjectName.next()){
		matchesArray.push(findBySubjectName.sys_id.toString());
	}
	
	return matchesArray;
}
]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>CHF03</sys_created_by>
        <sys_created_on>2019-06-25 15:11:26</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3578c801dbdebbc0d3e954f948961996</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>Match Completed Service Requests to Certs</sys_name>
        <sys_package display_value="Certificate Management" source="x_unugr_certificat">2c9bb9a3db8cbf40d3e954f9489619dd</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Certificate Management">2c9bb9a3db8cbf40d3e954f9489619dd</sys_scope>
        <sys_update_name>sysauto_script_3578c801dbdebbc0d3e954f948961996</sys_update_name>
        <sys_updated_by>CHF03</sys_updated_by>
        <sys_updated_on>2021-04-15 19:57:13</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
