<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_file">
    <ecc_agent_script_file action="INSERT_OR_UPDATE">
        <active>true</active>
        <checksum>Z8Q4KJd+b3FaQMHbRUKAFg==</checksum>
        <description>Downloads Generated Tenable report using impersonation</description>
        <directory>false</directory>
        <name>downloadTenableReport.ps1</name>
        <parent display_value="PowerShell">ef89e4fc372001006b882d465abe5d60</parent>
        <script>#region input variables&#13;
if (Test-Path env:\SNC_tenableServer) {&#13;
	[string]$tenableServer = $env:SNC_tenableServer&#13;
	$tenableReportId = $env:SNC_tenableReportId&#13;
	$outputDirectory = $env:SNC_outputDirectory&#13;
	$tenableUserName = $env:SNC_tenableUserName&#13;
	$tenablePassword = $env:SNC_tenablePassword&#13;
	$userName = $env:SNC_userName&#13;
	$userDomain = $env:SNC_userDomain&#13;
	$userPass = $env:SNC_userPass&#13;
	}   &#13;
	&#13;
&#13;
#endregion input variables&#13;
	&#13;
#region Impersonation&#13;
function Set-Impersonation&#13;
{&#13;
	Param(&#13;
	    [Parameter(ParameterSetName="ClearText", Mandatory=$true)][string]$Username,&#13;
	    [Parameter(ParameterSetName="ClearText", Mandatory=$true)][string]$Domain,&#13;
	    [Parameter(ParameterSetName="ClearText", Mandatory=$true)][string]$Password,&#13;
	    [Parameter(ParameterSetName="Credential", Mandatory=$true, Position=0)][PSCredential]$Credential,&#13;
	    [Parameter()][Switch]$Quiet&#13;
	)&#13;
&#13;
#Import the LogonUser Function from advapi32.dll and the CloseHandle Function from kernel32.dll&#13;
Add-Type -Namespace Import -Name Win32 -MemberDefinition @'&#13;
    [DllImport("advapi32.dll", SetLastError = true)]&#13;
    public static extern bool LogonUser(string user, string domain, string password, int logonType, int logonProvider, out IntPtr token);&#13;
&#13;
    [DllImport("kernel32.dll", SetLastError = true)]&#13;
    public static extern bool CloseHandle(IntPtr handle);&#13;
'@&#13;
&#13;
#Set Global variable to hold the Impersonation after it is created so it may be ended after script run&#13;
$Global:ImpersonatedUser = @{}&#13;
#Initialize handle variable so that it exists to be referenced in the LogonUser method&#13;
$tokenHandle = 0&#13;
&#13;
#Pass the PSCredentials to the variables to be sent to the LogonUser method&#13;
if ($Credential) {&#13;
    Get-Variable Username, Domain, Password | ForEach-Object {&#13;
        Set-Variable $_.Name -Value $Credential.GetNetworkCredential().$($_.Name)}&#13;
}&#13;
&#13;
#Call LogonUser and store its success.  [ref]$tokenHandle is used to store the token "out IntPtr token" from LogonUser.&#13;
$returnValue = [Import.Win32]::LogonUser($Username, $Domain, $Password, 2, 0, [ref]$tokenHandle)&#13;
&#13;
#If it fails, throw the verbose with the error code&#13;
if (!$returnValue) {&#13;
    $errCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();&#13;
	if (!$Quiet) {&#13;
    	Write-Host "Impersonate-User failed a call to LogonUser with error code: $errCode"&#13;
	}&#13;
    throw [System.ComponentModel.Win32Exception]$errCode&#13;
}&#13;
#Successful token stored in $tokenHandle&#13;
else {&#13;
    #Call the Impersonate method with the returned token. An ImpersonationContext is returned and stored in the&#13;
    #Global variable so that it may be used after script run.&#13;
    $Global:ImpersonatedUser.ImpersonationContext = [System.Security.Principal.WindowsIdentity]::Impersonate($tokenHandle)&#13;
    &#13;
    #Close the handle to the token. Voided to mask the Boolean return value.&#13;
    [void][Import.Win32]::CloseHandle($tokenHandle)&#13;
&#13;
    #Write the current user to ensure Impersonation worked and to remind user to revert back when finished.&#13;
    if (!$Quiet) {&#13;
        Write-Host "You are now impersonating user $([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)"&#13;
        Write-Host "It is very important that you call Remove-ImpersonateUser when finished to revert back to your user." `&#13;
            -ForegroundColor DarkYellow -BackgroundColor Black&#13;
    }&#13;
}&#13;
&#13;
#Clean up sensitive variables&#13;
$Username = $Domain = $Password = $Credential = $null&#13;
}&#13;
&#13;
#Function put in the Global scope to be used when Impersonation is finished.&#13;
Function Global:Remove-ImpersonateUser {&#13;
    &lt;#&#13;
    .SYNOPSIS&#13;
    Used to revert back to the orginal user after New-ImpersonateUser is called. You can only call this function once; it is deleted after it runs.&#13;
&#13;
    .INPUTS&#13;
    None.  You cannot pipe objects to Remove-ImpersonateUser&#13;
&#13;
    .OUTPUTS&#13;
    None.  Remove-ImpersonateUser does not generate any output.&#13;
    #&gt;&#13;
&#13;
    #Calling the Undo method reverts back to the original user.&#13;
    $ImpersonatedUser.ImpersonationContext.Undo()&#13;
&#13;
    #Clean up the Global variable and the function itself.&#13;
    Remove-Variable ImpersonatedUser -Scope Global&#13;
    Remove-Item Function:\Remove-ImpersonateUser&#13;
}&#13;
#endregion Impersonation&#13;
&#13;
#region initalize internal vars&#13;
	$errorOccured 					= $false;&#13;
	$errorString					= "";&#13;
	$errorCode                      = 0;&#13;
#endregion initalize internal vars&#13;
	&#13;
#region system variables for extended error reporting&#13;
&#13;
	$ReportErrorShowExceptionClass	= 1;&#13;
	$ReportErrorShowInnerException	= 1;&#13;
	$ReportErrorShowSource 			= 1;&#13;
	$ReportErrorShowStackTrace 		= 1;&#13;
	#system variable must be set to stop to catch &#13;
	#external invoke errors.&#13;
	$ErrorActionPreference 			= "stop";&#13;
&#13;
#endregion system variables for extended error reporting&#13;
&#13;
&#13;
try &#13;
	{&#13;
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12&#13;
add-type @"&#13;
    using System.Net;&#13;
    using System.Security.Cryptography.X509Certificates;&#13;
    public class TrustAllCertsPolicy : ICertificatePolicy {&#13;
        public bool CheckValidationResult(&#13;
            ServicePoint srvPoint, X509Certificate certificate,&#13;
            WebRequest request, int certificateProblem) {&#13;
            return true;&#13;
        }&#13;
    }&#13;
"@&#13;
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy&#13;
&#13;
	Set-Impersonation -Username $Username -Domain $userDomain -Password $userPass -Quiet&#13;
&#13;
	&#13;
	$baseUrl = "https://" + $tenableServer.trim() + "/rest"&#13;
&#13;
	#First lets get a token from tenable&#13;
	$tokenUrl = $baseUrl + '/token'&#13;
	$loginCredentials = New-Object PSObject&#13;
	$loginCredentials | Add-Member -MemberType NoteProperty -Name username -Value $tenableUserName &#13;
	$loginCredentials | Add-member -MemberType Noteproperty -Name password -Value $tenablePassword&#13;
&#13;
	$bodyData = (ConvertTo-Json -compress $loginCredentials)&#13;
&#13;
	$returnData = Invoke-RestMethod -Uri $tokenUrl -Method Post -Body $bodyData -UseBasicParsing -SessionVariable sv&#13;
	&#13;
	#get the token from the returned data&#13;
	$token = $returnData.response.token &#13;
&#13;
	$reportDownloadUrl = $baseUrl + "/report/$tenableReportId/download"&#13;
	$headerData = @{'X-SecurityCenter'="$token"}&#13;
&#13;
	$baseFileName = 'TenableScanReport_[DATETIME].csv'&#13;
	$fileName = $baseFileName.replace('[DATETIME]',(Get-Date -Format "MM-dd-yyyy"))&#13;
	&#13;
	if(!$outputDirectory.EndsWith("\")) {&#13;
        $outputDirectory += "\"&#13;
    }&#13;
&#13;
	$outFileFullPath = $outputDirectory + $fileName&#13;
	&#13;
	#download the report&#13;
	$returnData = Invoke-RestMethod -Uri $reportDownloadUrl -Method Post -Headers $headerData -UseBasicParsing -Websession $sv -OutFile $outFileFullPath&#13;
&#13;
	#after report is downloaded delete the report&#13;
	$deleteReportUrl = $baseUrl + "/report/" + $tenableReportId.trim()&#13;
	$headerData = @{'X-SecurityCenter'="$token"}&#13;
	&#13;
	$deleteResponse = Invoke-RestMethod -Uri $deleteReportUrl -Method Delete -Headers $headerData -UseBasicParsing -Websession $sv &#13;
	&#13;
	$returnErrorCode = $deleteResponse.error_code&#13;
	$returnErrorMessage = $deleteResponse.error_msg&#13;
	&#13;
	if($returnErrorCode -ne '0'){&#13;
		$reportStatus = "Downloaded but failed to Delete Report with error $returnErrorCode $returnErrorMessage"&#13;
	}else {&#13;
		$reportStatus = "Report deleted"&#13;
	}&#13;
	&#13;
	$downloadResult = New-Object -TypeName PSCustomObject&#13;
	$downloadResult | Add-Member -MemberType NoteProperty -Name "Status" -Value $reportStatus -Force&#13;
	$downloadResult | Add-Member -MemberType NoteProperty -Name "ReportId" -Value $tenableReportId -Force&#13;
	$downloadResult | Add-Member -MemberType NoteProperty -Name "ReportPath" -Value $outputDirectory -Force&#13;
	$downloadResult | Add-Member -MemberType NoteProperty -Name "ReportName" -Value $fileName -Force&#13;
&#13;
	$downloadReportResults = New-Object PSCustomObject &#13;
	$downloadReportResults | Add-Member -type NoteProperty -Name downloadResult -Value $downloadResult&#13;
&#13;
	$jsonDownloadReport = $downloadReportResults | ConvertTo-Json &#13;
			&#13;
}	&#13;
catch [System.Management.Automation.ActionPreferenceStopException]&#13;
{&#13;
	$errorOccured = $true;&#13;
	$errorString = $error[0].Exception.Message;&#13;
	$errorCode = -1&#13;
}&#13;
catch [System.Exception]&#13;
{&#13;
	$errorOccured = $true;&#13;
	$errorString = $error[0].Exception.Message;&#13;
	$errorCode = -1&#13;
&#13;
}&#13;
finally &#13;
{&#13;
	#cleanup the token if it existis&#13;
	if($token){&#13;
&#13;
		#code to clean up token when done&#13;
		$deleteTokenUrl = $baseUrl + '/token'&#13;
&#13;
		$headerData = @{'X-SecurityCenter'="$token"}&#13;
&#13;
		$returnData = Invoke-RestMethod -URI $deleteTokenUrl -Method Delete -Headers $headerData -UseBasicParsing -Websession $sv &#13;
	}&#13;
	&#13;
	if ($errorOccured -eq $true)&#13;
	{&#13;
		SNCLog-DebugInfo "`t Failed to download Tenable report : $error"&#13;
		[Console]::Error.WriteLine("Failed to download Tenable report: " + $errorString);&#13;
		Write-Host $errorString&#13;
	}&#13;
	else&#13;
	{&#13;
		Write-Host $jsonDownloadReport&#13;
	}&#13;
	if($ImpersonatedUser.ImpersonationContext)&#13;
	{&#13;
		Remove-ImpersonateUser&#13;
	}	&#13;
}		 	&#13;
	</script>
        <script_attachment/>
        <source/>
        <sys_class_name>ecc_agent_script_file</sys_class_name>
        <sys_created_by>CHF03</sys_created_by>
        <sys_created_on>2020-01-16 17:41:36</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>2050240fdb564c104ff2c55305961907</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>downloadTenableReport.ps1</sys_name>
        <sys_overrides/>
        <sys_package display_value="Certificate Management" source="x_unugr_certificat">2c9bb9a3db8cbf40d3e954f9489619dd</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Certificate Management">2c9bb9a3db8cbf40d3e954f9489619dd</sys_scope>
        <sys_update_name>ecc_agent_script_file_2050240fdb564c104ff2c55305961907</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2023-06-03 04:37:03</sys_updated_on>
        <use_attachment>false</use_attachment>
        <version/>
    </ecc_agent_script_file>
</record_update>
