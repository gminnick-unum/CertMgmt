<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_file">
    <ecc_agent_script_file action="INSERT_OR_UPDATE">
        <active>true</active>
        <checksum>dJs+Nanevb8UBjCoizKF3w==</checksum>
        <description/>
        <directory>false</directory>
        <name>launchQualysReport.ps1</name>
        <parent display_value="PowerShell">ef89e4fc372001006b882d465abe5d60</parent>
        <script>	#region input variables&#13;
	if (Test-Path env:\SNC_qualysServer) {&#13;
		$qualysServer = $env:SNC_qualysServer&#13;
		$qualysTemplateId = $env:SNC_qualysTemplateId&#13;
		$userName = $env:SNC_userName&#13;
		$password = $env:SNC_password&#13;
		}        &#13;
    #endregion input variables&#13;
&#13;
	try &#13;
	{&#13;
&#13;
             [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12&#13;
&#13;
		$authInfo = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("$userName`:$password"))&#13;
&#13;
		$headers = @{"X-Requested-With"="powershell";"Authorization"="Basic $authInfo"}&#13;
&#13;
&#13;
		$uriLaunchReport = "https://$qualysServer/api/2.0/fo/report/?action=launch&amp;template_id=$qualysTemplateId&amp;output_format=csv&amp;report_title=QualysScanReport&amp;hide_header=1"&#13;
&#13;
		$response = Invoke-RestMethod -Headers $headers -Uri $uriLaunchReport -Method post &#13;
&#13;
		$Status = $response.SIMPLE_RETURN.RESPONSE.TEXT&#13;
		$reportID = $response.SIMPLE_RETURN.RESPONSE.ITEM_LIST.ITEM.VALUE&#13;
&#13;
&#13;
		$reportResult = New-Object -TypeName PSCustomObject&#13;
		$reportResult | Add-Member -MemberType NoteProperty -Name "Status" -Value $Status -Force&#13;
		$reportResult | Add-Member -MemberType NoteProperty -Name "ReportId" -Value $reportID -Force&#13;
&#13;
		$launchReportResults = New-Object PSCustomObject &#13;
		$launchReportResults | Add-Member -type NoteProperty -Name launchResult -Value $reportResult&#13;
&#13;
		$jsonLaunchReport = $launchReportResults | ConvertTo-Json &#13;
	}&#13;
	catch [System.Management.Automation.ActionPreferenceStopException]&#13;
	{&#13;
		$errorOccured = $true;&#13;
		$errorString = $error[0].Exception.Message;&#13;
		$errorCode = -1&#13;
	}&#13;
	catch [System.Exception]&#13;
	{&#13;
		$errorOccured = $true;&#13;
		$errorString = $error[0].Exception.Message;&#13;
		$errorCode = -1&#13;
&#13;
	}&#13;
	finally &#13;
	{&#13;
		if ($errorOccured -eq $true)&#13;
		{&#13;
    		SNCLog-DebugInfo "`t Failed to QualysReport : $error"&#13;
    		[Console]::Error.WriteLine("The operation failed: " + $errorString);&#13;
			Write-Host $errorString&#13;
		}&#13;
		else&#13;
		{&#13;
			Write-Host $jsonLaunchReport&#13;
		}&#13;
		&#13;
	}	&#13;
</script>
        <script_attachment/>
        <source/>
        <sys_class_name>ecc_agent_script_file</sys_class_name>
        <sys_created_by>CHF03</sys_created_by>
        <sys_created_on>2019-06-04 16:01:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>9536d816db79bbc04ff2c553059619cf</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>launchQualysReport.ps1</sys_name>
        <sys_overrides/>
        <sys_package display_value="Certificate Management" source="x_unugr_certificat">2c9bb9a3db8cbf40d3e954f9489619dd</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Certificate Management">2c9bb9a3db8cbf40d3e954f9489619dd</sys_scope>
        <sys_update_name>ecc_agent_script_file_9536d816db79bbc04ff2c553059619cf</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2023-06-03 04:37:11</sys_updated_on>
        <use_attachment>false</use_attachment>
        <version/>
    </ecc_agent_script_file>
</record_update>
